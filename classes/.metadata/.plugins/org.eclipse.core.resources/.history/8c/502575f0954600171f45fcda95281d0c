package streams

object BloxorzTest {

	println("hello")                          //> hello
	
 object InfiniteLevel extends Solver with InfiniteTerrain {
    val startPos = Pos(1,3)
    val goal = Pos(5,8)
  }

  println(InfiniteLevel.solution)                 //> scala.NotImplementedError: an implementation is missing
                                                  //| 	at scala.Predef$.$qmark$qmark$qmark(Predef.scala:230)
                                                  //| 	at streams.Solver$class.solution(Solver.scala:86)
                                                  //| 	at streams.BloxorzTest$$anonfun$main$1$InfiniteLevel$2$.solution$lzycomp
                                                  //| ute(streams.BloxorzTest.scala:7)
                                                  //| 	at streams.BloxorzTest$$anonfun$main$1$InfiniteLevel$2$.solution(streams
                                                  //| .BloxorzTest.scala:7)
                                                  //| 	at streams.BloxorzTest$$anonfun$main$1.apply$mcV$sp(streams.BloxorzTest.
                                                  //| scala:12)
                                                  //| 	at org.scalaide.worksheet.runtime.library.WorksheetSupport$$anonfun$$exe
                                                  //| cute$1.apply$mcV$sp(WorksheetSupport.scala:76)
                                                  //| 	at org.scalaide.worksheet.runtime.library.WorksheetSupport$.redirected(W
                                                  //| orksheetSupport.scala:65)
                                                  //| 	at org.scalaide.worksheet.runtime.library.WorksheetSupport$.$execute(Wor
                                                  //| ksheetSupport.scala:75)
                                                  //| 	at streams.BloxorzTest$.main(streams.BloxorzTest.scala:3)
                                                  //| 	at streams.BloxorzTest.main(streams.BloxorzTest.scala)
}

/*class test1 extends StringParserTerrain{

}

object test3 {
	val level =
        """ST
          |oo
          |oo""".stripMargin
	val vector: Vector[Vector[Char]] =
    Vector(level.split("\n").map(str => Vector(str: _*)): _*)
	val test2 = new test1
	val terrain = test2.terrainFunction(vector)
	val startPos = test2.findChar('S', vector)
	val goal = test2.findChar('T', vector)
}*/